- sanity check type names
- subclasses of Type::Tiny
	- enum
	- union
	- intersection
	- complement (i.e. Str^Int is any string which does not look like an int)
- test cases
	- inlining of class, role and duck types
- documentation
- expand standard type library of types:
	- MooseX::Types::Structured
- Mouse compat?
- implement has_coercion_for_type; this means I need to be able to figure out when $type1 >= $type2
- create "plus_coercions" and "minus_coercions" methods for Type::Tiny which create a new anonymous subtypewith additional/fewer coercions

