- sanity check type names
- subclasses of Type::Tiny
	- enum
- test cases
	- inlining of class, role and duck types
	- inlining of unions, intersections and complements
	- Overload from stdlib
	- inlining for MooseX::Types::Structured
- documentation
- expand standard type library of types:
	- MooseX::Types::Structured
- Mouse compat?
- implement has_coercion_for_type; this means I need to be able to figure out when $type1 >= $type2
- create "plus_coercions" and "minus_coercions" methods for Type::Tiny which create a new anonymous subtypewith additional/fewer coercions
