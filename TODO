Post-1.000000 Changes
=====================

* Type::Params should provide compile_named/validate_named functions
  tailored for named parameters rather than using the slurpy Dict hack.

* Type::Utils::dwim_type shouldn't fall back to pulling types from the
  Moose/Mouse type registry unless the caller is a Moose/Mouse-based
  package *OR* it is explicitly requested like
  
     dwim_type("Foo", using => "Mouse")
  
* Also, there should be a way to disable Type::Utils::dwim_type falling
  back to making a class_type. Instead of does=>1, it should be more like
  fallback=>"make_class_type"|"make_role_type"|undef. Still need to
  support does=>1 for back-compat.

* Try to make inlining for ClassName, RoleName, StrMatch, etc more
  suitable for things like Mite.

* Inform Type::Coercion when it *should have* been frozen (for example,
  the parameterized ArrayRef, HashRef, Dict, and Tuple coercion
  generators). 
  
  After that, $coercion->add_type_coercions can issue a warning about
  that bad things are happening. On Perl 5.10, this can be done with
  warnings::warnif. On earlier Perls that mechanism is unreliable, so
  just use plain old warn.

* Investigate popular type constraints defined outside Type-Tiny, and
  consider which can be added to Types::Standard/Types::Common::*.
  These would need to be constraints that can be implemented with no
  non-core dependencies.

* Possibly add a NonEmpty type constraint, allowing NonEmpty[Str],
  NonEmpty[HashRef[Int]], NonEmpty[ArrayRef], etc. This would be an
  interesting one for optimizing.

* CycleTuple[Int,Str,HashRef] should allow [1,foo=>{},2,bar=>{}].

* Perhaps allow Type::Coercion::FromMoose's implementation of
  add_type_coercions to succeed?

* to_TypeTiny's _TypeTinyFromGeneric could support inlining?

* Investigate some more method overrides in Type::Tiny::Union - look at
  what Moose::Meta::TypeConstraint::Union does.
